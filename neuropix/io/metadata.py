import numpy as np
from pathlib import Path

def parse_metadata(path):
    path = Path(path)
    metadata_raw = _read_file(path)
    metadata = _get_parameters(metadata_raw)
    
    return metadata, metadata_raw

def _read_file(path):
    if not path.exists():
        raise FileNotFoundError(f"Metadata file not found: {path}")
    
    try:
        with open(path, 'r') as file:
            return {
                key.lstrip('~'): value
                for line in file
                for key, value in [line.strip().split('=', 1)]
                if '=' in line
            }
    except IOError as e:
        raise IOError(f"Could not read metadata file: {path}") from e

def _get_parameters(metadata):
        result = {}
        result['is_imec'] = metadata.get('typeThis', '') == 'imec'
        result['is_nidq'] = metadata.get('typeThis', '') == 'nidq'
        result['sampling_rate'] = float(metadata.get(
            'imSampRate' if result['is_imec'] else 'niSampRate', 0))
        
        if result['is_imec']:
            counts = list(map(int, metadata.get('snsApLfSy', '0,0,0').split(',')))
            result['n_ap_channels'] = counts[0]
            result['n_lf_channels'] = counts[1]
            result['n_sync_channels'] = counts[2]
        
        if result['is_nidq']:
            counts = list(map(int, metadata.get('snsMnMaXaDw', '0,0,0,0').split(',')))
            result['n_mn_channels'] = counts[0]
            result['n_ma_channels'] = counts[1]
            result['n_xa_channels'] = counts[2]
            result['n_dw_channels'] = counts[3]

        result['n_total_channels'] = int(metadata.get('nSavedChans', 0))
        result['probe_type'] = int(metadata.get('imDatPrb_type', 0))
        
        result['max_int'] = int( metadata.get('imMaxInt', 512)) if  result['is_imec'] else 32768
        result['voltage_range'] = float( metadata.get(
        'imAiRangeMax' if  result['is_imec'] else 'niAiRangeMax', 0))

        if result['is_imec']:
            if  result['probe_type'] in [21, 24, 2003, 2004, 2013, 2014]:
                result['ap_gains'],  result['lf_gains'] = [80.0] *  result['n_ap_channels'], [80.0] *  result['n_lf_channels']
            else:
                imro_table =  metadata.get('imroTbl', '')
                if not imro_table:
                    result['ap_gains'], result['lf_gains'] =  [],[]
                else:
                    lines = imro_table.replace(')(', ')|(').split('|')[1:]
                    gains = np.array([
                        list(map(float, line.strip('()').split()[3:5]))
                        for line in lines
                        if line.strip()
                    ])
                    result['ap_gains'], result['lf_gains'] = gains[:, 0].tolist(), gains[:, 1].tolist()
                     
            result['ap_scale'] = (result['voltage_range'] /  result['max_int'] / np.array( result['ap_gains'])) * 1e6
            result['lf_scale'] = (result['voltage_range'] /  result['max_int'] / np.array( result['lf_gains'])) * 1e6
    
        if result['is_nidq']:
                result['nidq_gains'] = np.ones(result['n_total_channels'])
                result['nidq_gains'][: result['n_mn_channels']] *= int(metadata.get('niMNGain', 1))
                result['nidq_gains'][ result['n_mn_channels']: result['n_mn_channels'] +  result['n_ma_channels']] *= int(
                    metadata.get('niMAGain', 1))
                result['nidq_scale'] = ( result['voltage_range'] /  result['max_int'] /  result['nidq_gains']) * 1e6

        channel_subset = metadata.get('snsSaveChanSubset', 'all')

        if  result['is_imec']:
            types = (['ap'] *   result['n_ap_channels'] +
                    ['lf'] *  result['n_lf_channels'] +
                    ['sync'] *  result['n_sync_channels']  +
                    ['undefined'] * ( result['n_total_channels']  -  result['n_ap_channels']  - 
                                    result['n_lf_channels'] -  result['n_sync_channels'] ))
        elif  result['is_nidq']:
            types = (['mn'] * result['n_mn_channels']  +
                    ['ma'] *  result['n_ma_channels'] +
                    ['xa'] *  result['n_xa_channels'] +
                    ['dw'] *  result['n_dw_channels'] +
                    ['undefined'] * ( result['n_total_channels'] -  result['n_mn_channels'] -
                                    result['n_ma_channels'] -  result['n_xa_channels'] - 
                                    result['n_dw_channels']))
        else:
            types = ['undefined'] *  result['n_total_channels']

        if channel_subset == 'all':
            return {idx: [idx, t] for idx, t in enumerate(types)}
            
        channels = []
        for part in channel_subset.split(','):
            if ':' in part:
                start, end = map(int, part.split(':'))
                channels.extend(range(start, end + 1))
            else:
                channels.append(int(part))

        result['channel_map'] = {chan: [idx, t] for idx, (chan, t) in enumerate(zip(channels, types))}
        
        result['_scales'] = np.ones(result['n_total_channels'])

        for chan, (idx, type_chan) in  result['channel_map'].items():
            if type_chan == 'ap':
                    result['_scales'][idx] =  result['ap_scale'][idx]
            elif type_chan == 'lf':
                    result['_scales'][idx] =  result['lf_scale'][idx]
            elif type_chan == 'nidq':
                    result['_scales'][idx] =  result['nidq_scale'][idx]

        result['file_size'] = int(metadata.get('fileSizeBytes', 0))
        result['bytes_per_number'] = 2
        result['total_samples'] = result['file_size'] // (result['bytes_per_number'] * result['n_total_channels'])
        
        result['time_points'] = np.arange(result['total_samples']) / result['sampling_rate']
        result['sample_positions'] = np.arange(result['total_samples']) * result['n_total_channels']
        
        result['duration'] = float(metadata.get('fileTimeSecs', 0))
        input_string = metadata.get('snsGeomMap', ' ')

        result['shank_number'],result['x_coords'],result['y_coords'] = _parse_coordinates(input_string)

        return result

def _parse_coordinates(input_string):
    parts = input_string.split(')')
    parts = [part.strip('()') for part in parts if part.strip()]
    
    shank_number, x_coords, y_coords = [], [], []
    
    for part in parts[1:]: 
        ch, x, y, _ = part.split(':')[0:4]
        x_coords.append(int(x))
        y_coords.append(int(y))
        shank_number.append(int(ch))

    return np.array(shank_number), np.array(x_coords), np.array(y_coords)


    


    

# meta_path = path.with_suffix('.meta')

# acqApLfSy=384,0,1
# appVersion=20230905
# catGTCmdline0=<CatGT -dir=//sil3/data/Large_scale_mapping_NP/lizards/SA9/SA9_Experiment_3_12_24/Insertion1 -run=SA9_Experiment_3_12_24_1 -g=0 -t=0 -prb_fld -t_miss_ok -ap -prb=0 -zerofillmax=0 -dest=//sil3/data/Large_scale_mapping_NP/lizards/SA9/SA9_Experiment_3_12_24/Insertion1>
# catGVals=0,0
# catNFiles=1
# catTVals=0,0
# fileCreateTime=2024-12-04T12:30:06
# fileCreateTime_original=2024-12-03T15:52:39
# fileName=//sil3/data/Large_scale_mapping_NP/lizards/SA9/SA9_Experiment_3_12_24/Insertion1/catgt_SA9_Experiment_3_12_24_1_g0/SA9_Experiment_3_12_24_1_g0_tcat.imec0.ap.bin
# fileSHA1=0
# fileSizeBytes=345128563780
# fileTimeSecs=14940.489857283204
# firstSample=167794531
# gateMode=Immediate
# imAiRangeMax=0.62
# imAiRangeMin=-0.62
# imAnyChanFullBand=true
# imCalibrated=true
# imChan0apGain=100
# imDatApi=3.62
# imDatBs_fw=2.0.169
# imDatBsc_fw=3.2.189
# imDatBsc_hw=2.1
# imDatBsc_pn=NP2_QBSC_00
# imDatBsc_sn=21230864
# imDatFx_hw=0.1
# imDatFx_pn=NPM_FLEX_01
# imDatFx_sn=23500527
# imDatHs_hw=3.3
# imDatHs_pn=NPM_HS_31
# imDatHs_sn=23500527
# imDatPrb_dock=1
# imDatPrb_pn=NP2014
# imDatPrb_port=1
# imDatPrb_slot=3
# imDatPrb_sn=23107818853
# imDatPrb_type=2013
# imErrFlags_IS_CT_SR_LK_PP_SY=1 0 612353314 1 0 29
# imIsSvyRun=false
# imLEDEnable=false
# imLowLatency=false
# imMaxInt=2048
# imSampRate=30000.282338902147
# imStdby=
# imSvyMaxBnk=3
# imSvySecPerBnk=30
# imTipLength=206
# imTrgRising=true
# imTrgSource=0
# imroFile=C:/Users/MarkS9/Desktop/SpikeGLX/Version Jan 2024/Release_v20230905-phase30/SpikeGLX/_Configs/2_last_shanks_extR.imro
# nDataDirs=1
# nSavedChans=385
# snsApLfSy=384,0,1
# snsSaveChanSubset=0:384
# syncImInputSlot=3
# syncSourceIdx=3
# syncSourcePeriod=1
# trigMode=Immediate
# typeImEnabled=1
# typeNiEnabled=1
# typeObEnabled=0
# typeThis=imec
# userNotes=New screen (small)
# ~imroTbl=(2013,384)(0 2 0 0 96)(1 2 0 0 97)(2 2 0 0 98)(3 2 0 0 99)(4 2 0 0 100)(5 2 0 0 101)(6 2 0 0 102)(7 2 0 0 103)(8 2 0 0 104)(9 2 0 0 105)(10 2 0 0 106)(11 2 0 0 107)(12 2 0 0 108)(13 2 0 0 109)(14 2 0 0 110)(15 2 0 0 111)(16 2 0 0 112)(17 2 0 0 113)(18 2 0 0 114)(19 2 0 0 115)(20 2 0 0 116)(21 2 0 0 117)(22 2 0 0 118)(23 2 0 0 119)(24 2 0 0 120)(25 2 0 0 121)(26 2 0 0 122)(27 2 0 0 123)(28 2 0 0 124)(29 2 0 0 125)(30 2 0 0 126)(31 2 0 0 127)(32 2 0 0 128)(33 2 0 0 129)(34 2 0 0 130)(35 2 0 0 131)(36 2 0 0 132)(37 2 0 0 133)(38 2 0 0 134)(39 2 0 0 135)(40 2 0 0 136)(41 2 0 0 137)(42 2 0 0 138)(43 2 0 0 139)(44 2 0 0 140)(45 2 0 0 141)(46 2 0 0 142)(47 2 0 0 143)(48 3 0 0 96)(49 3 0 0 97)(50 3 0 0 98)(51 3 0 0 99)(52 3 0 0 100)(53 3 0 0 101)(54 3 0 0 102)(55 3 0 0 103)(56 3 0 0 104)(57 3 0 0 105)(58 3 0 0 106)(59 3 0 0 107)(60 3 0 0 108)(61 3 0 0 109)(62 3 0 0 110)(63 3 0 0 111)(64 3 0 0 112)(65 3 0 0 113)(66 3 0 0 114)(67 3 0 0 115)(68 3 0 0 116)(69 3 0 0 117)(70 3 0 0 118)(71 3 0 0 119)(72 3 0 0 120)(73 3 0 0 121)(74 3 0 0 122)(75 3 0 0 123)(76 3 0 0 124)(77 3 0 0 125)(78 3 0 0 126)(79 3 0 0 127)(80 3 0 0 128)(81 3 0 0 129)(82 3 0 0 130)(83 3 0 0 131)(84 3 0 0 132)(85 3 0 0 133)(86 3 0 0 134)(87 3 0 0 135)(88 3 0 0 136)(89 3 0 0 137)(90 3 0 0 138)(91 3 0 0 139)(92 3 0 0 140)(93 3 0 0 141)(94 3 0 0 142)(95 3 0 0 143)(96 2 0 0 144)(97 2 0 0 145)(98 2 0 0 146)(99 2 0 0 147)(100 2 0 0 148)(101 2 0 0 149)(102 2 0 0 150)(103 2 0 0 151)(104 2 0 0 152)(105 2 0 0 153)(106 2 0 0 154)(107 2 0 0 155)(108 2 0 0 156)(109 2 0 0 157)(110 2 0 0 158)(111 2 0 0 159)(112 2 0 0 160)(113 2 0 0 161)(114 2 0 0 162)(115 2 0 0 163)(116 2 0 0 164)(117 2 0 0 165)(118 2 0 0 166)(119 2 0 0 167)(120 2 0 0 168)(121 2 0 0 169)(122 2 0 0 170)(123 2 0 0 171)(124 2 0 0 172)(125 2 0 0 173)(126 2 0 0 174)(127 2 0 0 175)(128 2 0 0 176)(129 2 0 0 177)(130 2 0 0 178)(131 2 0 0 179)(132 2 0 0 180)(133 2 0 0 181)(134 2 0 0 182)(135 2 0 0 183)(136 2 0 0 184)(137 2 0 0 185)(138 2 0 0 186)(139 2 0 0 187)(140 2 0 0 188)(141 2 0 0 189)(142 2 0 0 190)(143 2 0 0 191)(144 3 0 0 144)(145 3 0 0 145)(146 3 0 0 146)(147 3 0 0 147)(148 3 0 0 148)(149 3 0 0 149)(150 3 0 0 150)(151 3 0 0 151)(152 3 0 0 152)(153 3 0 0 153)(154 3 0 0 154)(155 3 0 0 155)(156 3 0 0 156)(157 3 0 0 157)(158 3 0 0 158)(159 3 0 0 159)(160 3 0 0 160)(161 3 0 0 161)(162 3 0 0 162)(163 3 0 0 163)(164 3 0 0 164)(165 3 0 0 165)(166 3 0 0 166)(167 3 0 0 167)(168 3 0 0 168)(169 3 0 0 169)(170 3 0 0 170)(171 3 0 0 171)(172 3 0 0 172)(173 3 0 0 173)(174 3 0 0 174)(175 3 0 0 175)(176 3 0 0 176)(177 3 0 0 177)(178 3 0 0 178)(179 3 0 0 179)(180 3 0 0 180)(181 3 0 0 181)(182 3 0 0 182)(183 3 0 0 183)(184 3 0 0 184)(185 3 0 0 185)(186 3 0 0 186)(187 3 0 0 187)(188 3 0 0 188)(189 3 0 0 189)(190 3 0 0 190)(191 3 0 0 191)(192 2 0 0 0)(193 2 0 0 1)(194 2 0 0 2)(195 2 0 0 3)(196 2 0 0 4)(197 2 0 0 5)(198 2 0 0 6)(199 2 0 0 7)(200 2 0 0 8)(201 2 0 0 9)(202 2 0 0 10)(203 2 0 0 11)(204 2 0 0 12)(205 2 0 0 13)(206 2 0 0 14)(207 2 0 0 15)(208 2 0 0 16)(209 2 0 0 17)(210 2 0 0 18)(211 2 0 0 19)(212 2 0 0 20)(213 2 0 0 21)(214 2 0 0 22)(215 2 0 0 23)(216 2 0 0 24)(217 2 0 0 25)(218 2 0 0 26)(219 2 0 0 27)(220 2 0 0 28)(221 2 0 0 29)(222 2 0 0 30)(223 2 0 0 31)(224 2 0 0 32)(225 2 0 0 33)(226 2 0 0 34)(227 2 0 0 35)(228 2 0 0 36)(229 2 0 0 37)(230 2 0 0 38)(231 2 0 0 39)(232 2 0 0 40)(233 2 0 0 41)(234 2 0 0 42)(235 2 0 0 43)(236 2 0 0 44)(237 2 0 0 45)(238 2 0 0 46)(239 2 0 0 47)(240 3 0 0 0)(241 3 0 0 1)(242 3 0 0 2)(243 3 0 0 3)(244 3 0 0 4)(245 3 0 0 5)(246 3 0 0 6)(247 3 0 0 7)(248 3 0 0 8)(249 3 0 0 9)(250 3 0 0 10)(251 3 0 0 11)(252 3 0 0 12)(253 3 0 0 13)(254 3 0 0 14)(255 3 0 0 15)(256 3 0 0 16)(257 3 0 0 17)(258 3 0 0 18)(259 3 0 0 19)(260 3 0 0 20)(261 3 0 0 21)(262 3 0 0 22)(263 3 0 0 23)(264 3 0 0 24)(265 3 0 0 25)(266 3 0 0 26)(267 3 0 0 27)(268 3 0 0 28)(269 3 0 0 29)(270 3 0 0 30)(271 3 0 0 31)(272 3 0 0 32)(273 3 0 0 33)(274 3 0 0 34)(275 3 0 0 35)(276 3 0 0 36)(277 3 0 0 37)(278 3 0 0 38)(279 3 0 0 39)(280 3 0 0 40)(281 3 0 0 41)(282 3 0 0 42)(283 3 0 0 43)(284 3 0 0 44)(285 3 0 0 45)(286 3 0 0 46)(287 3 0 0 47)(288 2 0 0 48)(289 2 0 0 49)(290 2 0 0 50)(291 2 0 0 51)(292 2 0 0 52)(293 2 0 0 53)(294 2 0 0 54)(295 2 0 0 55)(296 2 0 0 56)(297 2 0 0 57)(298 2 0 0 58)(299 2 0 0 59)(300 2 0 0 60)(301 2 0 0 61)(302 2 0 0 62)(303 2 0 0 63)(304 2 0 0 64)(305 2 0 0 65)(306 2 0 0 66)(307 2 0 0 67)(308 2 0 0 68)(309 2 0 0 69)(310 2 0 0 70)(311 2 0 0 71)(312 2 0 0 72)(313 2 0 0 73)(314 2 0 0 74)(315 2 0 0 75)(316 2 0 0 76)(317 2 0 0 77)(318 2 0 0 78)(319 2 0 0 79)(320 2 0 0 80)(321 2 0 0 81)(322 2 0 0 82)(323 2 0 0 83)(324 2 0 0 84)(325 2 0 0 85)(326 2 0 0 86)(327 2 0 0 87)(328 2 0 0 88)(329 2 0 0 89)(330 2 0 0 90)(331 2 0 0 91)(332 2 0 0 92)(333 2 0 0 93)(334 2 0 0 94)(335 2 0 0 95)(336 3 0 0 48)(337 3 0 0 49)(338 3 0 0 50)(339 3 0 0 51)(340 3 0 0 52)(341 3 0 0 53)(342 3 0 0 54)(343 3 0 0 55)(344 3 0 0 56)(345 3 0 0 57)(346 3 0 0 58)(347 3 0 0 59)(348 3 0 0 60)(349 3 0 0 61)(350 3 0 0 62)(351 3 0 0 63)(352 3 0 0 64)(353 3 0 0 65)(354 3 0 0 66)(355 3 0 0 67)(356 3 0 0 68)(357 3 0 0 69)(358 3 0 0 70)(359 3 0 0 71)(360 3 0 0 72)(361 3 0 0 73)(362 3 0 0 74)(363 3 0 0 75)(364 3 0 0 76)(365 3 0 0 77)(366 3 0 0 78)(367 3 0 0 79)(368 3 0 0 80)(369 3 0 0 81)(370 3 0 0 82)(371 3 0 0 83)(372 3 0 0 84)(373 3 0 0 85)(374 3 0 0 86)(375 3 0 0 87)(376 3 0 0 88)(377 3 0 0 89)(378 3 0 0 90)(379 3 0 0 91)(380 3 0 0 92)(381 3 0 0 93)(382 3 0 0 94)(383 3 0 0 95)
# ~muxTbl=(24,16)(0 1 32 33 64 65 96 97 128 129 160 161 192 193 224 225 256 257 288 289 320 321 352 353)(2 3 34 35 66 67 98 99 130 131 162 163 194 195 226 227 258 259 290 291 322 323 354 355)(4 5 36 37 68 69 100 101 132 133 164 165 196 197 228 229 260 261 292 293 324 325 356 357)(6 7 38 39 70 71 102 103 134 135 166 167 198 199 230 231 262 263 294 295 326 327 358 359)(8 9 40 41 72 73 104 105 136 137 168 169 200 201 232 233 264 265 296 297 328 329 360 361)(10 11 42 43 74 75 106 107 138 139 170 171 202 203 234 235 266 267 298 299 330 331 362 363)(12 13 44 45 76 77 108 109 140 141 172 173 204 205 236 237 268 269 300 301 332 333 364 365)(14 15 46 47 78 79 110 111 142 143 174 175 206 207 238 239 270 271 302 303 334 335 366 367)(16 17 48 49 80 81 112 113 144 145 176 177 208 209 240 241 272 273 304 305 336 337 368 369)(18 19 50 51 82 83 114 115 146 147 178 179 210 211 242 243 274 275 306 307 338 339 370 371)(20 21 52 53 84 85 116 117 148 149 180 181 212 213 244 245 276 277 308 309 340 341 372 373)(22 23 54 55 86 87 118 119 150 151 182 183 214 215 246 247 278 279 310 311 342 343 374 375)(24 25 56 57 88 89 120 121 152 153 184 185 216 217 248 249 280 281 312 313 344 345 376 377)(26 27 58 59 90 91 122 123 154 155 186 187 218 219 250 251 282 283 314 315 346 347 378 379)(28 29 60 61 92 93 124 125 156 157 188 189 220 221 252 253 284 285 316 317 348 349 380 381)(30 31 62 63 94 95 126 127 158 159 190 191 222 223 254 255 286 287 318 319 350 351 382 383)
# ~snsChanMap=(384,0,1)(AP0;0:96)(AP1;1:97)(AP2;2:98)(AP3;3:99)(AP4;4:100)(AP5;5:101)(AP6;6:102)(AP7;7:103)(AP8;8:104)(AP9;9:105)(AP10;10:106)(AP11;11:107)(AP12;12:108)(AP13;13:109)(AP14;14:110)(AP15;15:111)(AP16;16:112)(AP17;17:113)(AP18;18:114)(AP19;19:115)(AP20;20:116)(AP21;21:117)(AP22;22:118)(AP23;23:119)(AP24;24:120)(AP25;25:121)(AP26;26:122)(AP27;27:123)(AP28;28:124)(AP29;29:125)(AP30;30:126)(AP31;31:127)(AP32;32:128)(AP33;33:129)(AP34;34:130)(AP35;35:131)(AP36;36:132)(AP37;37:133)(AP38;38:134)(AP39;39:135)(AP40;40:136)(AP41;41:137)(AP42;42:138)(AP43;43:139)(AP44;44:140)(AP45;45:141)(AP46;46:142)(AP47;47:143)(AP48;48:288)(AP49;49:289)(AP50;50:290)(AP51;51:291)(AP52;52:292)(AP53;53:293)(AP54;54:294)(AP55;55:295)(AP56;56:296)(AP57;57:297)(AP58;58:298)(AP59;59:299)(AP60;60:300)(AP61;61:301)(AP62;62:302)(AP63;63:303)(AP64;64:304)(AP65;65:305)(AP66;66:306)(AP67;67:307)(AP68;68:308)(AP69;69:309)(AP70;70:310)(AP71;71:311)(AP72;72:312)(AP73;73:313)(AP74;74:314)(AP75;75:315)(AP76;76:316)(AP77;77:317)(AP78;78:318)(AP79;79:319)(AP80;80:320)(AP81;81:321)(AP82;82:322)(AP83;83:323)(AP84;84:324)(AP85;85:325)(AP86;86:326)(AP87;87:327)(AP88;88:328)(AP89;89:329)(AP90;90:330)(AP91;91:331)(AP92;92:332)(AP93;93:333)(AP94;94:334)(AP95;95:335)(AP96;96:144)(AP97;97:145)(AP98;98:146)(AP99;99:147)(AP100;100:148)(AP101;101:149)(AP102;102:150)(AP103;103:151)(AP104;104:152)(AP105;105:153)(AP106;106:154)(AP107;107:155)(AP108;108:156)(AP109;109:157)(AP110;110:158)(AP111;111:159)(AP112;112:160)(AP113;113:161)(AP114;114:162)(AP115;115:163)(AP116;116:164)(AP117;117:165)(AP118;118:166)(AP119;119:167)(AP120;120:168)(AP121;121:169)(AP122;122:170)(AP123;123:171)(AP124;124:172)(AP125;125:173)(AP126;126:174)(AP127;127:175)(AP128;128:176)(AP129;129:177)(AP130;130:178)(AP131;131:179)(AP132;132:180)(AP133;133:181)(AP134;134:182)(AP135;135:183)(AP136;136:184)(AP137;137:185)(AP138;138:186)(AP139;139:187)(AP140;140:188)(AP141;141:189)(AP142;142:190)(AP143;143:191)(AP144;144:336)(AP145;145:337)(AP146;146:338)(AP147;147:339)(AP148;148:340)(AP149;149:341)(AP150;150:342)(AP151;151:343)(AP152;152:344)(AP153;153:345)(AP154;154:346)(AP155;155:347)(AP156;156:348)(AP157;157:349)(AP158;158:350)(AP159;159:351)(AP160;160:352)(AP161;161:353)(AP162;162:354)(AP163;163:355)(AP164;164:356)(AP165;165:357)(AP166;166:358)(AP167;167:359)(AP168;168:360)(AP169;169:361)(AP170;170:362)(AP171;171:363)(AP172;172:364)(AP173;173:365)(AP174;174:366)(AP175;175:367)(AP176;176:368)(AP177;177:369)(AP178;178:370)(AP179;179:371)(AP180;180:372)(AP181;181:373)(AP182;182:374)(AP183;183:375)(AP184;184:376)(AP185;185:377)(AP186;186:378)(AP187;187:379)(AP188;188:380)(AP189;189:381)(AP190;190:382)(AP191;191:383)(AP192;192:0)(AP193;193:1)(AP194;194:2)(AP195;195:3)(AP196;196:4)(AP197;197:5)(AP198;198:6)(AP199;199:7)(AP200;200:8)(AP201;201:9)(AP202;202:10)(AP203;203:11)(AP204;204:12)(AP205;205:13)(AP206;206:14)(AP207;207:15)(AP208;208:16)(AP209;209:17)(AP210;210:18)(AP211;211:19)(AP212;212:20)(AP213;213:21)(AP214;214:22)(AP215;215:23)(AP216;216:24)(AP217;217:25)(AP218;218:26)(AP219;219:27)(AP220;220:28)(AP221;221:29)(AP222;222:30)(AP223;223:31)(AP224;224:32)(AP225;225:33)(AP226;226:34)(AP227;227:35)(AP228;228:36)(AP229;229:37)(AP230;230:38)(AP231;231:39)(AP232;232:40)(AP233;233:41)(AP234;234:42)(AP235;235:43)(AP236;236:44)(AP237;237:45)(AP238;238:46)(AP239;239:47)(AP240;240:192)(AP241;241:193)(AP242;242:194)(AP243;243:195)(AP244;244:196)(AP245;245:197)(AP246;246:198)(AP247;247:199)(AP248;248:200)(AP249;249:201)(AP250;250:202)(AP251;251:203)(AP252;252:204)(AP253;253:205)(AP254;254:206)(AP255;255:207)(AP256;256:208)(AP257;257:209)(AP258;258:210)(AP259;259:211)(AP260;260:212)(AP261;261:213)(AP262;262:214)(AP263;263:215)(AP264;264:216)(AP265;265:217)(AP266;266:218)(AP267;267:219)(AP268;268:220)(AP269;269:221)(AP270;270:222)(AP271;271:223)(AP272;272:224)(AP273;273:225)(AP274;274:226)(AP275;275:227)(AP276;276:228)(AP277;277:229)(AP278;278:230)(AP279;279:231)(AP280;280:232)(AP281;281:233)(AP282;282:234)(AP283;283:235)(AP284;284:236)(AP285;285:237)(AP286;286:238)(AP287;287:239)(AP288;288:48)(AP289;289:49)(AP290;290:50)(AP291;291:51)(AP292;292:52)(AP293;293:53)(AP294;294:54)(AP295;295:55)(AP296;296:56)(AP297;297:57)(AP298;298:58)(AP299;299:59)(AP300;300:60)(AP301;301:61)(AP302;302:62)(AP303;303:63)(AP304;304:64)(AP305;305:65)(AP306;306:66)(AP307;307:67)(AP308;308:68)(AP309;309:69)(AP310;310:70)(AP311;311:71)(AP312;312:72)(AP313;313:73)(AP314;314:74)(AP315;315:75)(AP316;316:76)(AP317;317:77)(AP318;318:78)(AP319;319:79)(AP320;320:80)(AP321;321:81)(AP322;322:82)(AP323;323:83)(AP324;324:84)(AP325;325:85)(AP326;326:86)(AP327;327:87)(AP328;328:88)(AP329;329:89)(AP330;330:90)(AP331;331:91)(AP332;332:92)(AP333;333:93)(AP334;334:94)(AP335;335:95)(AP336;336:240)(AP337;337:241)(AP338;338:242)(AP339;339:243)(AP340;340:244)(AP341;341:245)(AP342;342:246)(AP343;343:247)(AP344;344:248)(AP345;345:249)(AP346;346:250)(AP347;347:251)(AP348;348:252)(AP349;349:253)(AP350;350:254)(AP351;351:255)(AP352;352:256)(AP353;353:257)(AP354;354:258)(AP355;355:259)(AP356;356:260)(AP357;357:261)(AP358;358:262)(AP359;359:263)(AP360;360:264)(AP361;361:265)(AP362;362:266)(AP363;363:267)(AP364;364:268)(AP365;365:269)(AP366;366:270)(AP367;367:271)(AP368;368:272)(AP369;369:273)(AP370;370:274)(AP371;371:275)(AP372;372:276)(AP373;373:277)(AP374;374:278)(AP375;375:279)(AP376;376:280)(AP377;377:281)(AP378;378:282)(AP379;379:283)(AP380;380:284)(AP381;381:285)(AP382;382:286)(AP383;383:287)(SY0;384:384)
# ~snsGeomMap=(NP2014,4,250,70)(2:27:720:1)(2:59:720:1)(2:27:735:1)(2:59:735:1)(2:27:750:1)(2:59:750:1)(2:27:765:1)(2:59:765:1)(2:27:780:1)(2:59:780:1)(2:27:795:1)(2:59:795:1)(2:27:810:1)(2:59:810:1)(2:27:825:1)(2:59:825:1)(2:27:840:1)(2:59:840:1)(2:27:855:1)(2:59:855:1)(2:27:870:1)(2:59:870:1)(2:27:885:1)(2:59:885:1)(2:27:900:1)(2:59:900:1)(2:27:915:1)(2:59:915:1)(2:27:930:1)(2:59:930:1)(2:27:945:1)(2:59:945:1)(2:27:960:1)(2:59:960:1)(2:27:975:1)(2:59:975:1)(2:27:990:1)(2:59:990:1)(2:27:1005:1)(2:59:1005:1)(2:27:1020:1)(2:59:1020:1)(2:27:1035:1)(2:59:1035:1)(2:27:1050:1)(2:59:1050:1)(2:27:1065:1)(2:59:1065:1)(3:27:720:1)(3:59:720:1)(3:27:735:1)(3:59:735:1)(3:27:750:1)(3:59:750:1)(3:27:765:1)(3:59:765:1)(3:27:780:1)(3:59:780:1)(3:27:795:1)(3:59:795:1)(3:27:810:1)(3:59:810:1)(3:27:825:1)(3:59:825:1)(3:27:840:1)(3:59:840:1)(3:27:855:1)(3:59:855:1)(3:27:870:1)(3:59:870:1)(3:27:885:1)(3:59:885:1)(3:27:900:1)(3:59:900:1)(3:27:915:1)(3:59:915:1)(3:27:930:1)(3:59:930:1)(3:27:945:1)(3:59:945:1)(3:27:960:1)(3:59:960:1)(3:27:975:1)(3:59:975:1)(3:27:990:1)(3:59:990:1)(3:27:1005:1)(3:59:1005:1)(3:27:1020:1)(3:59:1020:1)(3:27:1035:1)(3:59:1035:1)(3:27:1050:1)(3:59:1050:1)(3:27:1065:1)(3:59:1065:1)(2:27:1080:1)(2:59:1080:1)(2:27:1095:1)(2:59:1095:1)(2:27:1110:1)(2:59:1110:1)(2:27:1125:1)(2:59:1125:1)(2:27:1140:1)(2:59:1140:1)(2:27:1155:1)(2:59:1155:1)(2:27:1170:1)(2:59:1170:1)(2:27:1185:1)(2:59:1185:1)(2:27:1200:1)(2:59:1200:1)(2:27:1215:1)(2:59:1215:1)(2:27:1230:1)(2:59:1230:1)(2:27:1245:1)(2:59:1245:1)(2:27:1260:1)(2:59:1260:1)(2:27:1275:1)(2:59:1275:1)(2:27:1290:1)(2:59:1290:1)(2:27:1305:1)(2:59:1305:1)(2:27:1320:1)(2:59:1320:1)(2:27:1335:1)(2:59:1335:1)(2:27:1350:1)(2:59:1350:1)(2:27:1365:1)(2:59:1365:1)(2:27:1380:1)(2:59:1380:1)(2:27:1395:1)(2:59:1395:1)(2:27:1410:1)(2:59:1410:1)(2:27:1425:1)(2:59:1425:1)(3:27:1080:1)(3:59:1080:1)(3:27:1095:1)(3:59:1095:1)(3:27:1110:1)(3:59:1110:1)(3:27:1125:1)(3:59:1125:1)(3:27:1140:1)(3:59:1140:1)(3:27:1155:1)(3:59:1155:1)(3:27:1170:1)(3:59:1170:1)(3:27:1185:1)(3:59:1185:1)(3:27:1200:1)(3:59:1200:1)(3:27:1215:1)(3:59:1215:1)(3:27:1230:1)(3:59:1230:1)(3:27:1245:1)(3:59:1245:1)(3:27:1260:1)(3:59:1260:1)(3:27:1275:1)(3:59:1275:1)(3:27:1290:1)(3:59:1290:1)(3:27:1305:1)(3:59:1305:1)(3:27:1320:1)(3:59:1320:1)(3:27:1335:1)(3:59:1335:1)(3:27:1350:1)(3:59:1350:1)(3:27:1365:1)(3:59:1365:1)(3:27:1380:1)(3:59:1380:1)(3:27:1395:1)(3:59:1395:1)(3:27:1410:1)(3:59:1410:1)(3:27:1425:1)(3:59:1425:1)(2:27:0:1)(2:59:0:1)(2:27:15:1)(2:59:15:1)(2:27:30:1)(2:59:30:1)(2:27:45:1)(2:59:45:1)(2:27:60:1)(2:59:60:1)(2:27:75:1)(2:59:75:1)(2:27:90:1)(2:59:90:1)(2:27:105:1)(2:59:105:1)(2:27:120:1)(2:59:120:1)(2:27:135:1)(2:59:135:1)(2:27:150:1)(2:59:150:1)(2:27:165:1)(2:59:165:1)(2:27:180:1)(2:59:180:1)(2:27:195:1)(2:59:195:1)(2:27:210:1)(2:59:210:1)(2:27:225:1)(2:59:225:1)(2:27:240:1)(2:59:240:1)(2:27:255:1)(2:59:255:1)(2:27:270:1)(2:59:270:1)(2:27:285:1)(2:59:285:1)(2:27:300:1)(2:59:300:1)(2:27:315:1)(2:59:315:1)(2:27:330:1)(2:59:330:1)(2:27:345:1)(2:59:345:1)(3:27:0:1)(3:59:0:1)(3:27:15:1)(3:59:15:1)(3:27:30:1)(3:59:30:1)(3:27:45:1)(3:59:45:1)(3:27:60:1)(3:59:60:1)(3:27:75:1)(3:59:75:1)(3:27:90:1)(3:59:90:1)(3:27:105:1)(3:59:105:1)(3:27:120:1)(3:59:120:1)(3:27:135:1)(3:59:135:1)(3:27:150:1)(3:59:150:1)(3:27:165:1)(3:59:165:1)(3:27:180:1)(3:59:180:1)(3:27:195:1)(3:59:195:1)(3:27:210:1)(3:59:210:1)(3:27:225:1)(3:59:225:1)(3:27:240:1)(3:59:240:1)(3:27:255:1)(3:59:255:1)(3:27:270:1)(3:59:270:1)(3:27:285:1)(3:59:285:1)(3:27:300:1)(3:59:300:1)(3:27:315:1)(3:59:315:1)(3:27:330:1)(3:59:330:1)(3:27:345:1)(3:59:345:1)(2:27:360:1)(2:59:360:1)(2:27:375:1)(2:59:375:1)(2:27:390:1)(2:59:390:1)(2:27:405:1)(2:59:405:1)(2:27:420:1)(2:59:420:1)(2:27:435:1)(2:59:435:1)(2:27:450:1)(2:59:450:1)(2:27:465:1)(2:59:465:1)(2:27:480:1)(2:59:480:1)(2:27:495:1)(2:59:495:1)(2:27:510:1)(2:59:510:1)(2:27:525:1)(2:59:525:1)(2:27:540:1)(2:59:540:1)(2:27:555:1)(2:59:555:1)(2:27:570:1)(2:59:570:1)(2:27:585:1)(2:59:585:1)(2:27:600:1)(2:59:600:1)(2:27:615:1)(2:59:615:1)(2:27:630:1)(2:59:630:1)(2:27:645:1)(2:59:645:1)(2:27:660:1)(2:59:660:1)(2:27:675:1)(2:59:675:1)(2:27:690:1)(2:59:690:1)(2:27:705:1)(2:59:705:1)(3:27:360:1)(3:59:360:1)(3:27:375:1)(3:59:375:1)(3:27:390:1)(3:59:390:1)(3:27:405:1)(3:59:405:1)(3:27:420:1)(3:59:420:1)(3:27:435:1)(3:59:435:1)(3:27:450:1)(3:59:450:1)(3:27:465:1)(3:59:465:1)(3:27:480:1)(3:59:480:1)(3:27:495:1)(3:59:495:1)(3:27:510:1)(3:59:510:1)(3:27:525:1)(3:59:525:1)(3:27:540:1)(3:59:540:1)(3:27:555:1)(3:59:555:1)(3:27:570:1)(3:59:570:1)(3:27:585:1)(3:59:585:1)(3:27:600:1)(3:59:600:1)(3:27:615:1)(3:59:615:1)(3:27:630:1)(3:59:630:1)(3:27:645:1)(3:59:645:1)(3:27:660:1)(3:59:660:1)(3:27:675:1)(3:59:675:1)(3:27:690:1)(3:59:690:1)(3:27:705:1)(3:59:705:1)

    